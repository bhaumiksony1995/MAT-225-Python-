{"sender_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","event":"chat","history":[{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"Bhaumik,  You are running into 2 issues here.\n\n1. You are using the Python 3 kernel.  In Python 3, the \"/\" division operator returns a float.  So 1012 / 100 results in 10.12.  You can get behavior more like what we have used in class by using \"//\".  You can read more [here](http://www.informit.com/articles/article.aspx?p=1439189)  So, this is an issue in your `IntegerToDigraph` function.\n1. The way you have written `IntegerToDigraph` means that you don't need a `for` loop when you apply it to your list Decoded.  Replace \n```\nfor i in range(len(Decoded)):\n    DecodedM.append((IntegerToDigraph(Decoded)))\n```\nwith just a simple command:\n```IntegerToDigraph(Decoded)```\n\n","date":"2017-11-24T02:50:29.562Z"},{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"Bhaumik,  You are running into 2 issues here.\n\n1. You are using the Python 3 kernel.  In Python 3, the \"/\" division operator returns a float.  So 1012 / 100 results in 10.12.  You can get behavior more like what we have used in class by using \"//\".  You can read more [here](http://www.informit.com/articles/article.aspx?p=1439189)  So, this is an issue in your `IntegerToDigraph` function.\n1. The way you have written `IntegerToDigraph` means that you don't need a `for` loop when you apply it to your list Decoded.  Replace \n```\nfor i in range(len(Decoded)):\n    DecodedM.append((IntegerToDigraph(Decoded)))\n```\nwith `IntegerToDigraph(Decoded)`.\n\n","date":"2017-11-24T02:50:06.576Z"},{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"Bhaumik,  You are running into 2 issues here.\n\n1. You are using the Python 3 kernel.  In Python 3, the \"/\" division operator returns a float.  So 1012 / 100 results in 10.12.  You can get behavior more like what we have used in class by using \"//\".  You can read more [here](http://www.informit.com/articles/article.aspx?p=1439189)  So, this is an issue in your `IntegerToDigraph` function.\n\n","date":"2017-11-24T02:48:16.289Z"},{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"Bhaumik,  You are running into 2 issues here.\n\n1. You are using the Python 3 kernel.  In Python 3, the \"/\" division operator returns a float.  So 1012 / 100 results in 10.12.  You can get behavior more like what we have used in class by using \"//\".  You can read more [here](http://www.informit.com/articles/article.aspx?p=1439189)\n\n","date":"2017-11-24T02:47:41.553Z"},{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"Bhaumik,  You are running into 2 issues here.\n\n1. You are using the Python 3 kernel.  In Python 3, the \"/\" division operator returns a float.  So 1012 / 100 results in 10.12.  You can get behavior more like what we have used in class by using \"//\".  You can read more [here](http://www.informit.com/articles/article.aspx?p=1439189)","date":"2017-11-24T02:47:27.369Z"}],"date":"2017-11-24T02:47:27.369Z","editing":{}}
{"sender_id":"190ae3d8-3c85-485e-abdf-0135e4834aab","event":"chat","history":[{"author_id":"190ae3d8-3c85-485e-abdf-0135e4834aab","content":"Thank you for the help! I think I got it working right, only thing is when converting back to a string I get an address returned instead of the string. I know in languages like C++ you can dereference the address to get the value but that doesn't seem to be working here.","date":"2017-11-24T03:06:25.653Z"}],"date":"2017-11-24T03:06:25.653Z"}
{"sender_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","event":"chat","history":[{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"One issue is a typo in $p$ and $q$.  For #1 and #2 in the RSA project assignment, I need to make $n$ larger than $26*26$ to ensure we can encode pairs of letters properly. So, please use:\n$$\nn = 53 * 67 = 3551,\ne = 17,\nd = 101\n$$\nNote that $n$ and $d$ have changed. This is just for #1 and #2 in the assignment.","date":"2017-11-24T13:32:39.043Z"}],"date":"2017-11-24T13:32:39.043Z"}
{"sender_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","event":"chat","history":[{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"**Dereferencing issue:**  There are two things going on here.\n\n1. `DecodedM` is a list containing a list.  So, when you do the map command, you only want to apply this to a list.  So, do\n`DecodedString=map(IntegerToString,DecodedM[0])`.\n1. In Python 3, the `map` command does not return a list object.  It returns a map object.  So, you can covert it to a list with:\n`list(DecodedString)`.  Or, you could avoid the `map` command using a list comprehension: `[IntegerToString(s) for s in DecodedM[0]]`.","date":"2017-11-24T13:41:41.035Z"},{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"**Dereferencing issue:**  There are two things going on here.\n\n1. `DecodedM` is a list containing a list.  So, when you do the map command, you only want to apply this to a list.  So, do\n`DecodedString=map(IntegerToString,DecodedM[0])`\n","date":"2017-11-24T13:40:20.102Z"},{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"**Dereferencing issue:**  There are two things going on here.\n\n1. `DecodedM` is a list containing a list.  So, when you do the map command, you only want to apply this to a list.  So, do\n``` DecodedString=map(IntegerToString,DecodedM[0])\n```\n","date":"2017-11-24T13:40:09.499Z"},{"author_id":"8eaabcbc-cbcb-4d44-875b-6415655633ba","content":"**Dereferencing issue:**  There are two things going on here.\n\n1. `DecodedM` is a list containing a list.  So, when you do the map command, you only want to apply this to a list.  So, do\n``` DecodedString=map(IntegerToString,DecodedM[0])\n```","date":"2017-11-24T13:39:54.715Z"}],"date":"2017-11-24T13:39:54.715Z","editing":{}}