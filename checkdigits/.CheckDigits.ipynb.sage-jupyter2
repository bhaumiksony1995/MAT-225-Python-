{"output":{"0":{"text":"The ISBN number 039309426X is True\n","name":"stdout"}},"exec_count":51,"input":"def checkISBN10(input):\n    i = 10\n    sum = 0\n\n    for x in range (len(input),0):\n        if s[x] == 'X':\n            sum = (sum + (len(input) - x) * 10)\n        else:\n            sum = (sum + (len(input) - x) * int(s[x]))\n        sum = sum + (i * int(input[x]))\n        print x\n        i = i - x\n\n    sum = sum % 11\n    if sum == 0:\n        return True\n    if sum != 0:\n        return False\n\ns='0883857197'\n#s='039309426X'\nint(s)\nprint \"The ISBN number\" ,s, \"is\" , checkISBN10(s)","state":"done","pos":3,"cell_type":"code","type":"cell","id":"5fc624","kernel":"python2"}
{"type":"cell","id":"0fe177","pos":2,"input":"s='0883857197'\nlen(s)","output":{"0":{"data":{"text/plain":"10"},"output_type":"execute_result","exec_count":1}},"cell_type":"code","exec_count":1}
{"type":"cell","id":"11b487","pos":13,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"17abcf","pos":9,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"2b5911","pos":1,"input":"## ISBN 10\n\nFor pre-2007 books, the ISBN code contains 10 digits, $d_1d_2\\ldots d_9d_9d_{10}$, with the requirement that\n\n$$\n10*d_{1}+9*d_2+\\cdots +2*d_9+1*d_{10} \\text{ mod } 11 = 0.\n$$\n\nThe digit on the right, $d_{10}$, is considered to be the _check digit_.  Note that since we are working mod $11$, we might have a check digit that is $10$.  In that case, we represent the digit by $X$.\n\n**Try This:** \n\n1. Create a Python function that accepts a string of digits for an ISBN-10 code and returns `True` if the code checks out and `False` if not.\n1. Apply your function to an actual ISBN-10 number.\n1. What happens if you make an error in one digit?\n1. What if two adjacent digits are interchanged?\n1. What if two non-adjacent digits are interchanged?","cell_type":"markdown"}
{"type":"cell","id":"36f7e5","pos":4,"input":"","cell_type":"code"}
{"type":"cell","id":"482ead","pos":8,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"51e5f3","pos":15,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"534128","pos":14,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"71f6ae","pos":11,"input":"## UPC codes\n\nUniversal product codes use a system similar to ISBN-13 except it only has 12 digits.  Consider UPC code, $d_{1}d_{2}\\ldots d_{11}d_{12}$.  The requirement is now\n\n$$\n3*(d_1+d_3+\\cdots+d_{11}) + (d_2+d_4+\\cdots+d_{12}) \\text{ mod } 10 = 0\n$$\n\nHere $d_{12}$ is the _check digit_.\n\n**Try This:** \n\n1. Create a Python function that accepts a string of digits for a UPC code and returns `True` if the code checks out and `False` if not.\n1. Apply your function to an actual UPC number.\n1. What happens if you make an error in one digit?\n1. What if two adjacent digits are interchanged?\n1. What if two non-adjacent digits are interchanged?\n\n","cell_type":"markdown"}
{"type":"cell","id":"722492","pos":7,"input":"def checkISBN13:\n    ","cell_type":"code","exec_count":0}
{"type":"cell","id":"7b55a8","pos":6,"input":"## ISBN 13\n\nBeginning in 2007, ISBN codes contain 13 digits and a different check digit scheme is used.  Consider an ISBN-13 number, $d_{1}d_{2}\\ldots d_{11}d_{12}d_{13}$.  The requirement is now\n\n$$\n3*(d_2+d_4+\\cdots+d_{12}) + (d_1+d_3+\\cdots+d_{13}) \\text{ mod } 10 = 0\n$$\n\nHere $d_{13}$ is the _check digit_.\n\n**Try This:** \n\n1. Create a Python function that accepts a string of digits for an ISBN-13 code and returns `True` if the code checks out and `False` if not.\n1. Apply your function to an actual ISBN-13 number.\n1. What happens if you make an error in one digit?\n1. What if two adjacent digits are interchanged?\n1. What if two non-adjacent digits are interchanged?\n\n","cell_type":"markdown"}
{"type":"cell","id":"80a532","pos":12,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"b5096e","pos":5,"input":"","cell_type":"code"}
{"type":"cell","id":"c4a1fb","pos":10,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"f4024f","pos":0,"input":"# Check Digits & Mod: ISBN and UPC codes","cell_type":"markdown"}
{"type":"file","last_load":1507728789144}
{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":82714624}}